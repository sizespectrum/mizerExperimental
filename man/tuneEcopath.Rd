% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ecopath_tune.R
\name{tuneEcopath}
\alias{tuneEcopath}
\title{Launch shiny gadget for matching mizer model to Ecopath data}
\usage{
tuneEcopath(
  params,
  controls = c("fishing", "reproduction", "exponent"),
  tabs = c("Spectra", "Catch", "Growth", "Repro", "Rates"),
  preserve = c("erepro", "reproduction_level", "R_max"),
  return_app = FALSE,
  ...
)
}
\arguments{
\item{params}{MizerParams object to tune. If missing, the gadget tries to
recover information from log files left over from aborted previous runs.}

\item{controls}{A character vector of names of input parameter control
sections that should be displayed in the sidebar. See "Customisation"
below.}

\item{tabs}{A character vector of names of the tabs that should be displayed
in the main section. See "Customisation" below.}

\item{preserve}{Specifies whether the \code{reproduction_level} should be
preserved or the maximum reproduction rate \code{R_max} or the reproductive
efficiency \code{erepro} (Default). See \code{\link[=setBevertonHolt]{setBevertonHolt()}} for an explanation
of the \code{reproduction_level}.}

\item{return_app}{Boolean. For testing purposes only. When set to TRUE will
return a shinyApp object instead of running the gadget.}

\item{...}{Other params needed by individual tabs.}
}
\value{
The tuned MizerParams object
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}}

The function opens a shiny gadget, an interactive web page. This page has a
side panel with controls for various model parameters and a main panel with
tabs for various diagnostic plots.
}
\details{
This gadget is meant for tuning a model to steady state. It is not
meant for tuning the dynamics of the model. That should be done in a second
step using functions like \code{setRmax()} or \code{changeResource()}.

There is an "Instructions" button near the top left of the gadget that gives
you a quick overview of the user interface.

After you click the "Return" button in the side panel, the function will
return the parameter object in the state at that time, with \code{Rmax} set to
\code{Inf} and \code{erepro} set to the value it had after the last match to Ecopath.

At any time the gadget allows the user to download the current params object
as an .rds file via the "Download" button.
}
\section{Undo functionality}{
The gadget keeps a log of all steady states you create while working with the
gadget. You can go back to the last steady state by hitting the "Undo"
button. You can go back an arbitrary number of states and also go forward
again. There is also a button to go right back to the initial steady state.

When you leave the gadget by hitting the "Return" button, this log is
cleared. If you stop the gadget from RStudio by hitting the "Stop" button,
then the log is left behind. You can then restart the gadget by calling
\code{tuneParams()} without a \code{params} argument and it will re-instate the states
from the log.

The log is stored in the tempdir of your current R session, as given by
\code{tempdir()}. For each steady state you calculate the params objects is in a
file named according to the date and time when it was created.
}

\section{Customisation}{
You can customise which functionality is included in the app via the
\code{controls} and \code{tabs} arguments. You can remove some of the controls and tabs
by providing shorter lists to those arguments. You can also add your own
controls and tabs.

For an entry "foo" in the \code{controls} list there needs to be a function
"fooControlUI" that defines the input elements and a function "fooControl"
that processes those inputs to change the params object. You can model your
own control sections on the existing ones that you find in the file
\code{R/tuneParams_controls.R}.

For any entry "Foo" or "foo" in the \code{tabs} list there needs to be a function
"fooTabUI" that defines the tab layout and a function "fooTab" that
calculates the outputs to be displayed on the tab. You can model your own
tabs on the example tab that you find in the file \code{R/exampleTab.R}.
}

